<?php
/**
 * File: class-frontendrouter.php
 *
 * @since 2024-07-21
 * @license GPL-3.0-or-later
 *
 * @package Solea/Routers
 */

namespace Solea\App\Routers;

use solea\App\Controllers\EventParticipations\DisplayRegistrationForm;
use solea\App\Controllers\EventParticipations\RegistrationFailed;
use solea\App\Controllers\EventParticipations\RegistrationSuccessfull;
use solea\App\Controllers\Events\ListAvailableEvents;
use Solea\App\models\Event;
use Solea\App\models\Participant;
use Solea\App\Requests\CreateSepaQRCode;

if ( session_status() !== PHP_SESSION_ACTIVE ) {
	session_start();
}

/**
 * Router for requests from the frontend.
 */
class FrontendRouter {

	/**
	 * Executes the specified code based on the given attributes.
	 *
	 * @param array $attributes The attributes passed to the method.
	 *                          Possible attributes:
	 *                          - 'event-id' (int|null): The ID of the event. Defaults to null.
	 *
	 * @return string|null The output generated by the executed code, or null if no output is generated.
	 */
	public static function execute( $attributes ) {

		$plugin_data = get_plugin_data( SOLEA_PLUGIN_STARTUP_FILE );
		$attr        = shortcode_atts(
			array(
				'event-id' => null,
			),
			$attributes,
			'solea-list-events'
		);
		$event_id    = $attr['event-id'];

		ob_start();

		if ( null === $event_id ) {
			ListAvailableEvents::execute_from_public();
			exit;
		}

		if ( isset( $_SESSION['solea_nonce'] ) && wp_verify_nonce( sanitize_key( wp_unslash( $_SESSION['solea_nonce'] ) ) ) && isset( $_POST['save'] ) ) {
			require SOLEA_PLUGIN_DIR . 'app/routers/frontend-router/new-participant-save.php';
			return;
		} elseif ( isset( $_POST['save'] ) ) {
				echo esc_html__( 'This request is not valid anymore. Please go back to start page', 'solea' );
				return;

		}

		$event_id = (int) $event_id;

		DisplayRegistrationForm::execute( $event_id );
		return ob_get_clean();
	}
}
